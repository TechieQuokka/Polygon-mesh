#include <iostream>
#include <fstream>
#include <polygon_mesh/core/mesh.hpp>

using namespace polygon_mesh;

int main() {
    std::cout << "PLY iteration test..." << std::endl;
    
    try {
        // Create mesh with triangle
        core::Mesh<float> mesh;
        
        // Add vertices
        auto v1 = mesh.add_vertex(core::Vertex<float>(math::Vector3<float>(0.0f, 0.0f, 0.0f)));
        auto v2 = mesh.add_vertex(core::Vertex<float>(math::Vector3<float>(1.0f, 0.0f, 0.0f)));
        auto v3 = mesh.add_vertex(core::Vertex<float>(math::Vector3<float>(0.5f, 1.0f, 0.0f)));
        
        // Add triangle
        mesh.add_triangle(v1, v2, v3);
        
        std::cout << "Mesh created successfully" << std::endl;
        
        // Test PLY saving step by step
        std::ofstream file("iteration_test.ply");
        if (!file.is_open()) {
            std::cout << "Failed to open file" << std::endl;
            return 1;
        }
        
        std::cout << "File opened successfully" << std::endl;
        
        const auto& vertices = mesh.vertices();
        const auto& faces = mesh.faces();
        
        std::cout << "Got references to vertices and faces" << std::endl;
        
        // Write header
        file << "ply\n";
        file << "format ascii 1.0\n";
        file << "comment Generated by Iteration Test\n";
        file << "element vertex " << vertices.size() << "\n";
        file << "property float x\n";
        file << "property float y\n";
        file << "property float z\n";
        file << "element face " << faces.size() << "\n";
        file << "property list uchar int vertex_indices\n";
        file << "end_header\n";
        
        std::cout << "Header written successfully" << std::endl;
        
        // Write vertices
        std::cout << "Writing vertices..." << std::endl;
        for (std::size_t i = 0; i < vertices.size(); ++i) {
            const auto& vertex = vertices[i];
            std::cout << "Writing vertex " << i << ": (" << vertex.position.x << ", " << vertex.position.y << ", " << vertex.position.z << ")" << std::endl;
            file << vertex.position.x << " " << vertex.position.y << " " << vertex.position.z << "\n";
        }
        
        std::cout << "Vertices written successfully" << std::endl;
        
        // Write faces
        std::cout << "Writing faces..." << std::endl;
        for (std::size_t i = 0; i < faces.size(); ++i) {
            const auto& face = faces[i];
            std::cout << "Writing face " << i << " with " << face.vertex_count() << " vertices" << std::endl;
            
            file << face.vertex_count();
            std::cout << "Wrote vertex count" << std::endl;
            
            for (std::size_t j = 0; j < face.vertices.size(); ++j) {
                auto vertex_id = face.vertices[j];
                std::cout << "Writing vertex ID " << j << ": " << vertex_id << std::endl;
                file << " " << vertex_id;
            }
            file << "\n";
            
            std::cout << "Face " << i << " written successfully" << std::endl;
        }
        
        file.close();
        std::cout << "PLY iteration test completed successfully!" << std::endl;
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
        return 1;
    }
}