#include <iostream>
#include <fstream>
#include <polygon_mesh/core/mesh.hpp>

using namespace polygon_mesh;

// Simple PLY save function
bool simple_ply_save(const std::string& filepath, const core::Mesh<float>& mesh) {
    try {
        std::ofstream file(filepath);
        if (!file.is_open()) {
            return false;
        }
        
        const auto& vertices = mesh.vertices();
        const auto& faces = mesh.faces();
        
        // Write header
        file << "ply\n";
        file << "format ascii 1.0\n";
        file << "comment Generated by Simple PLY Writer\n";
        file << "element vertex " << vertices.size() << "\n";
        file << "property float x\n";
        file << "property float y\n";
        file << "property float z\n";
        file << "element face " << faces.size() << "\n";
        file << "property list uchar int vertex_indices\n";
        file << "end_header\n";
        
        // Write vertices
        for (const auto& vertex : vertices) {
            file << vertex.position.x << " " << vertex.position.y << " " << vertex.position.z << "\n";
        }
        
        // Write faces
        for (const auto& face : faces) {
            file << face.vertex_count();
            for (const auto& vertex_id : face.vertices) {
                file << " " << vertex_id;
            }
            file << "\n";
        }
        
        return true;
    } catch (...) {
        return false;
    }
}

int main() {
    std::cout << "Safe PLY test..." << std::endl;
    
    try {
        // Create mesh with triangle
        core::Mesh<float> mesh;
        
        // Add vertices
        auto v1 = mesh.add_vertex(core::Vertex<float>(math::Vector3<float>(0.0f, 0.0f, 0.0f)));
        auto v2 = mesh.add_vertex(core::Vertex<float>(math::Vector3<float>(1.0f, 0.0f, 0.0f)));
        auto v3 = mesh.add_vertex(core::Vertex<float>(math::Vector3<float>(0.5f, 1.0f, 0.0f)));
        
        // Add triangle
        mesh.add_triangle(v1, v2, v3);
        
        std::cout << "Created mesh with " << mesh.vertex_count() << " vertices and " << mesh.face_count() << " faces" << std::endl;
        
        // Test simple PLY save
        bool result = simple_ply_save("safe_test.ply", mesh);
        std::cout << "Simple PLY save result: " << (result ? "success" : "failed") << std::endl;
        
        if (result) {
            std::cout << "PLY file saved successfully!" << std::endl;
        }
        
        return 0;
        
    } catch (const std::exception& e) {
        std::cerr << "Exception: " << e.what() << std::endl;
        return 1;
    }
}